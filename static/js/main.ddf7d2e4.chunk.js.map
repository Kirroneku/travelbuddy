{"version":3,"sources":["Components/Header.js","Components/MapChart.js","Components/App.js","serviceWorker.js","index.js"],"names":["Header","document","body","clientWidth","setLocation","useState","hasValue","setValue","className","onSubmit","type","id","placeholder","onChange","location","target","value","console","log","disabled","SimpleMap","style","height","width","frameborder","border","src","allowfullscreen","App","searching","setSearch","event","preventDefault","getElementById","newLocation","display","Boolean","window","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gQA0CeA,G,YAtCEC,SAASC,KAAKC,YAEhB,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EAWJC,oBAAS,GAXL,mBAW3BC,EAX2B,KAWjBC,EAXiB,KAkBhC,OAEI,6BACI,yBAAKC,UAAU,UAEf,0BAAMC,SAAUL,GACZ,2BAAOM,KAAK,OAAOC,GAAG,gBAAgBC,YAAY,SAASC,SAXhD,SAACC,GACpBP,EAAkC,IAAzBO,EAASC,OAAOC,OACzBC,QAAQC,IAAgB,GAAZZ,MAUJ,2BAAOK,GAAG,eAAeD,KAAK,SAASM,MAAM,SAAWG,SAAUb,SCNnEc,EApBG,SAAC,GAAgB,IAAfN,EAAc,EAAdA,SAEf,OAEG,yBAAKO,MAAO,CAAEC,OAAQ,QAASC,MAAO,SAClC,4BACAF,MAAO,CACHE,MAAM,OACND,OAAO,OACPE,YAAY,IACZC,OAAO,KAEXC,IAAK,4FAAqEZ,EAC1Ea,iBAAe,MCYZC,MAxBf,WAAgB,IAAD,EAEmBvB,mBAAS,iBAF5B,mBAENS,EAFM,aAGkBT,mBAASS,IAH3B,mBAGNe,EAHM,KAGKC,EAHL,KAWb,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,CAAQJ,YAAa,SAAC2B,GAAD,OARL,SAACA,EAAOjB,GAC1BG,QAAQC,IAAI,eAAgBa,GAC5BA,EAAMC,iBACNF,EAAU7B,SAASgC,eAAe,iBAAiBjB,OAKjBkB,CAAYH,MAC5C,yBAAKI,QAAQ,OAAO3B,UAAU,WAC5B,6BACE,kBAAC,EAAD,CAAkBM,SAAUe,QCVlBO,QACW,cAA7BC,OAAOvB,SAASwB,UAEe,UAA7BD,OAAOvB,SAASwB,UAEhBD,OAAOvB,SAASwB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzC,SAASgC,eAAe,SDyHpB,kBAAmBU,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.ddf7d2e4.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport '../CSS/Header.css';\r\n// import { Link } from 'react-router-dom';\r\n\r\nconst isMobile = document.body.clientWidth < 500? true: false;\r\n\r\nconst Header = ({ setLocation }) => {\r\n\r\n    const socialStyle = {\r\n        \"float\": \"right\",\r\n        \"marginTop\": \"0.5em\",\r\n        // \"marginRight\": \"min(200px, 10%)\"\r\n    }\r\n    \r\n    if( isMobile ) {\r\n    }\r\n\r\n    let [hasValue, setValue ] = useState(true);\r\n\r\n    const locationChange = (location) => {\r\n        setValue(location.target.value == \"\");\r\n        console.log(hasValue == true);\r\n    }\r\n\r\n    return (     \r\n\r\n        <div>\r\n            <div className=\"header\">\r\n            \r\n            <form onSubmit={setLocation}>\r\n                <input type=\"text\" id=\"locationInput\" placeholder=\"Search\" onChange={locationChange}></input> \r\n                <input id=\"searchSubmit\" type=\"submit\" value=\"&#xf002;\" disabled={hasValue}/>\r\n            </form>\r\n            </div>\r\n            {/* {this.props.children}   */}\r\n        </div> \r\n\r\n    )\r\n    \r\n   \r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n// import GoogleMapReact from 'google-map-react';\r\n \r\n// const AnyReactComponent = ({ text }) => <div>{text}</div>;\r\n \r\nconst SimpleMap = ({location}) => {\r\n    const API_KEY = \"AIzaSyAcpGLtUQg1RVxIqZ42C6SSpMoeCBwLiBY\";\r\n     return (\r\n        // Important! Always set the container height explicitly\r\n        <div style={{ height: '100vh', width: '100%' }}>\r\n            <iframe\r\n            style={{\r\n                width:\"100%\",\r\n                height:\"100%\",\r\n                frameborder:\"0\",\r\n                border:\"0\"\r\n            }}\r\n            src={\"https://www.google.com/maps/embed/v1/place?key=\" + API_KEY+ \"&q=\" + location}\r\n            allowfullscreen>\r\n            </iframe>\r\n        </div>\r\n    );\r\n  \r\n}\r\n \r\nexport default SimpleMap;","import React, { useState } from 'react';\nimport '../CSS/App.css';\n\nimport Header from \"./Header\";\nimport GoogleApiWrapper from \"./MapChart\";\n\nfunction App() {\n\n  const [location, setLocation] = useState(\"Macchu Picchu\");\n  const [searching, setSearch] = useState(location);\n\n  const newLocation = (event, location) => {\n    console.log(\"New Location\", event)\n    event.preventDefault();\n    setSearch(document.getElementById(\"locationInput\").value);\n  }\n\n  return (\n    <div className=\"App\">\n      <Header setLocation={(event) => newLocation(event)}/>\n      <div display=\"flex\" className=\"content\">\n        <div>\n          <GoogleApiWrapper location={searching}/>\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}